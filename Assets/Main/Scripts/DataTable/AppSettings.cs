
#region Copyright (c) 2015 KEngine / Kelly <http://github.com/mr-kelly>, All rights reserved.

// KEngine - Asset Bundle framework for Unity3D
// ===================================
// 
// Author:  Kelly
// Email: 23110388@qq.com
// Github: https://github.com/mr-kelly/KEngine
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library.

#endregion

// This file is auto generated by SettingModuleEditor.cs!
// Don't manipulate me!
// Default Template for KEngine!

using System.Collections;
using System.Collections.Generic;
using KEngine;
using KEngine.Modules;
using TableML;
namespace AppSettings
{
	/// <summary>
    /// All settings list here, so you can reload all settings manully from the list.
	/// </summary>
    public partial class SettingsManager
    {
        private static IReloadableSettings[] _settingsList;
        public static IReloadableSettings[] SettingsList
        {
            get
            {
                if (_settingsList == null)
                {
                    _settingsList = new IReloadableSettings[]
                    { 
                        BattleBuffTableSettings._instance,
                        BattleCardTableSettings._instance,
                        BattleMonsterTableSettings._instance,
                        DialogTableSettings._instance,
                        NpcTableSettings._instance,
                    };
                }
                return _settingsList;
            }
        }

#if UNITY_EDITOR
        [UnityEditor.MenuItem("KEngine/Settings/Try Reload All Settings Code")]
#endif
	    public static void AllSettingsReload()
	    {
	        for (var i = 0; i < SettingsList.Length; i++)
	        {
	            var settings = SettingsList[i];
                if (settings.Count > 0 // if never reload, ignore
#if UNITY_EDITOR
                    || !UnityEditor.EditorApplication.isPlaying // in editor and not playing, force load!
#endif
                    )
                {
                    settings.ReloadAll();
                }

	        }
	    }

    }


	/// <summary>
	/// Auto Generate for Tab File: "BattleBuffTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BattleBuffTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BattleBuffTable.txt"
        };
        internal static BattleBuffTableSettings _instance = new BattleBuffTableSettings();
        Dictionary<int, BattleBuffTableSetting> _dict = new Dictionary<int, BattleBuffTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BattleBuffTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BattleBuffTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BattleBuffTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BattleBuffTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BattleBuffTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BattleBuffTableSetting.ParsePrimaryKey(row);
                        BattleBuffTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BattleBuffTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BattleBuffTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BattleBuffTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BattleBuffTable
        /// </summary>
        public static BattleBuffTableSetting Get(int primaryKey)
        {
            BattleBuffTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BattleBuffTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BattleBuffTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public string  Name { get; private set;}
        
        /// <summary>
        /// Buff描述
        /// </summary>
        public string Desc { get; private set;}
        
        /// <summary>
        /// Buff默认持续时间
        /// </summary>
        public int Time { get; private set;}
        
        /// <summary>
        /// Buff的效果类型,BattleActionType
        /// </summary>
        public List<int> ActionTypes { get; private set;}
        
        /// <summary>
        /// Buff效果的参数
        /// </summary>
        public List<int> ActionPrarms { get; private set;}
        

        internal BattleBuffTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_string (row.Values[1], ""); 
            Desc = row.Get_string(row.Values[2], ""); 
            Time = row.Get_int(row.Values[3], ""); 
            ActionTypes = row.Get_List_int(row.Values[4], ""); 
            ActionPrarms = row.Get_List_int(row.Values[5], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "BattleCardTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BattleCardTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BattleCardTable.txt"
        };
        internal static BattleCardTableSettings _instance = new BattleCardTableSettings();
        Dictionary<int, BattleCardTableSetting> _dict = new Dictionary<int, BattleCardTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BattleCardTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BattleCardTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BattleCardTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BattleCardTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BattleCardTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BattleCardTableSetting.ParsePrimaryKey(row);
                        BattleCardTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BattleCardTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BattleCardTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BattleCardTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BattleCardTable
        /// </summary>
        public static BattleCardTableSetting Get(int primaryKey)
        {
            BattleCardTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BattleCardTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BattleCardTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public string  Name { get; private set;}
        
        /// <summary>
        /// 卡牌描述
        /// </summary>
        public string Desc { get; private set;}
        
        /// <summary>
        /// 卡牌类型(攻击0,装备1,法术2)
        /// </summary>
        public int Type { get; private set;}
        
        /// <summary>
        /// 魔法开销
        /// </summary>
        public int Spending { get; private set;}
        
        /// <summary>
        /// 图标路径
        /// </summary>
        public string Icon { get; private set;}
        
        /// <summary>
        /// 购买开销
        /// </summary>
        public int Price { get; private set;}
        
        /// <summary>
        /// 特效类型(BattleActionType)
        /// </summary>
        public List<int> ActionTypes { get; private set;}
        
        /// <summary>
        /// 特效参数
        /// </summary>
        public List<int> ActionParams { get; private set;}
        

        internal BattleCardTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_string (row.Values[1], ""); 
            Desc = row.Get_string(row.Values[2], ""); 
            Type = row.Get_int(row.Values[3], ""); 
            Spending = row.Get_int(row.Values[4], ""); 
            Icon = row.Get_string(row.Values[5], ""); 
            Price = row.Get_int(row.Values[6], ""); 
            ActionTypes = row.Get_List_int(row.Values[7], ""); 
            ActionParams = row.Get_List_int(row.Values[8], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "BattleMonsterTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BattleMonsterTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BattleMonsterTable.txt"
        };
        internal static BattleMonsterTableSettings _instance = new BattleMonsterTableSettings();
        Dictionary<int, BattleMonsterTableSetting> _dict = new Dictionary<int, BattleMonsterTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BattleMonsterTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BattleMonsterTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BattleMonsterTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BattleMonsterTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BattleMonsterTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BattleMonsterTableSetting.ParsePrimaryKey(row);
                        BattleMonsterTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BattleMonsterTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BattleMonsterTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BattleMonsterTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BattleMonsterTable
        /// </summary>
        public static BattleMonsterTableSetting Get(int primaryKey)
        {
            BattleMonsterTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BattleMonsterTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BattleMonsterTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public string  Name { get; private set;}
        
        /// <summary>
        /// 卡牌描述
        /// </summary>
        public string Desc { get; private set;}
        
        /// <summary>
        /// 怪物等级
        /// </summary>
        public int Level { get; private set;}
        
        /// <summary>
        /// 血量
        /// </summary>
        public int HP { get; private set;}
        
        /// <summary>
        /// 最大血量
        /// </summary>
        public int MaxHp { get; private set;}
        
        /// <summary>
        /// 蓝量
        /// </summary>
        public int MP { get; private set;}
        
        /// <summary>
        /// 蓝量
        /// </summary>
        public int MaxMP { get; private set;}
        
        /// <summary>
        /// 行动值
        /// </summary>
        public int AP { get; private set;}
        
        /// <summary>
        /// 最大行动值
        /// </summary>
        public int MaxAP { get; private set;}
        
        /// <summary>
        /// 技能ID
        /// </summary>
        public int SkillId { get; private set;}
        
        /// <summary>
        /// 图标路径
        /// </summary>
        public string Icon { get; private set;}
        
        /// <summary>
        /// 身上的buff
        /// </summary>
        public List<int> BuffIds { get; private set;}
        
        /// <summary>
        /// buff的参数
        /// </summary>
        public List<int> BuffParams { get; private set;}
        
        /// <summary>
        /// 装备的武器
        /// </summary>
        public List<int> EquipIds { get; private set;}
        

        internal BattleMonsterTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_string (row.Values[1], ""); 
            Desc = row.Get_string(row.Values[2], ""); 
            Level = row.Get_int(row.Values[3], ""); 
            HP = row.Get_int(row.Values[4], ""); 
            MaxHp = row.Get_int(row.Values[5], ""); 
            MP = row.Get_int(row.Values[6], ""); 
            MaxMP = row.Get_int(row.Values[7], ""); 
            AP = row.Get_int(row.Values[8], ""); 
            MaxAP = row.Get_int(row.Values[9], ""); 
            SkillId = row.Get_int(row.Values[10], ""); 
            Icon = row.Get_string(row.Values[11], ""); 
            BuffIds = row.Get_List_int(row.Values[12], ""); 
            BuffParams = row.Get_List_int(row.Values[13], ""); 
            EquipIds = row.Get_List_int(row.Values[14], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "DialogTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class DialogTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "DialogTable.txt"
        };
        internal static DialogTableSettings _instance = new DialogTableSettings();
        Dictionary<int, DialogTableSetting> _dict = new Dictionary<int, DialogTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private DialogTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static DialogTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: DialogTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : DialogTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: DialogTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = DialogTableSetting.ParsePrimaryKey(row);
                        DialogTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new DialogTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: DialogTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: DialogTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: DialogTable
        /// </summary>
        public static DialogTableSetting Get(int primaryKey)
        {
            DialogTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "DialogTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class DialogTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// #文本
        /// </summary>
        public string Text { get; private set;}
        
        /// <summary>
        /// #类型
        /// </summary>
        public int Type { get; private set;}
        
        /// <summary>
        /// #下一目录（组）
        /// </summary>
        public List<int> NextIds { get; private set;}
        
        /// <summary>
        /// #图片目录
        /// </summary>
        public int ImageId { get; private set;}
        

        internal DialogTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Text = row.Get_string(row.Values[1], ""); 
            Type = row.Get_int(row.Values[2], "1"); 
            NextIds = row.Get_List_int(row.Values[3], ""); 
            ImageId = row.Get_int(row.Values[4], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "NpcTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class NpcTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "NpcTable.txt"
        };
        internal static NpcTableSettings _instance = new NpcTableSettings();
        Dictionary<int, NpcTableSetting> _dict = new Dictionary<int, NpcTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private NpcTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static NpcTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: NpcTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : NpcTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: NpcTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = NpcTableSetting.ParsePrimaryKey(row);
                        NpcTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new NpcTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: NpcTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: NpcTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: NpcTable
        /// </summary>
        public static NpcTableSetting Get(int primaryKey)
        {
            NpcTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "NpcTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class NpcTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// #对话Id
        /// </summary>
        public int DialogId { get; private set;}
        

        internal NpcTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            DialogId = row.Get_int(row.Values[1], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}
 
}
