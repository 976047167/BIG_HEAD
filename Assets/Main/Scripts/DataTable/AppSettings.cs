
#region Copyright (c) 2015 KEngine / Kelly <http://github.com/mr-kelly>, All rights reserved.

// KEngine - Asset Bundle framework for Unity3D
// ===================================
// 
// Author:  Kelly
// Email: 23110388@qq.com
// Github: https://github.com/mr-kelly/KEngine
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library.

#endregion

// This file is auto generated by SettingModuleEditor.cs!
// Don't manipulate me!
// Default Template for KEngine!

using System.Collections;
using System.Collections.Generic;
using KEngine;
using KEngine.Modules;
using TableML;
namespace AppSettings
{
	/// <summary>
    /// All settings list here, so you can reload all settings manully from the list.
	/// </summary>
    public partial class SettingsManager
    {
        private static IReloadableSettings[] _settingsList;
        public static IReloadableSettings[] SettingsList
        {
            get
            {
                if (_settingsList == null)
                {
                    _settingsList = new IReloadableSettings[]
                    { 
                        BattleActionTableSettings._instance,
                        BattleBuffTableSettings._instance,
                        BattleCardTableSettings._instance,
                        BattleEquipTableSettings._instance,
                        BattleMonsterTableSettings._instance,
                        BoxTableSettings._instance,
                        CharacterModelTableSettings._instance,
                        ClassCharacterTableSettings._instance,
                        DialogTableSettings._instance,
                        LevelTableSettings._instance,
                        LocalizationTableSettings._instance,
                        NpcTableSettings._instance,
                        PromptTableSettings._instance,
                        RewardTableSettings._instance,
                        SceneTableSettings._instance,
                        ShopTableSettings._instance,
                        TextureTableSettings._instance,
                        TradeTableSettings._instance,
                    };
                }
                return _settingsList;
            }
        }

#if UNITY_EDITOR
        [UnityEditor.MenuItem("Tools/Settings/Try Reload All Settings Code")]
#endif
	    public static void AllSettingsReload()
	    {
	        for (var i = 0; i < SettingsList.Length; i++)
	        {
	            var settings = SettingsList[i];
                if (settings.Count > 0 // if never reload, ignore
#if UNITY_EDITOR
                    || !UnityEditor.EditorApplication.isPlaying // in editor and not playing, force load!
#endif
                    )
                {
                    settings.ReloadAll();
                }

	        }
	    }

    }


	/// <summary>
	/// Auto Generate for Tab File: "BattleActionTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BattleActionTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BattleActionTable.txt"
        };
        internal static BattleActionTableSettings _instance = new BattleActionTableSettings();
        Dictionary<int, BattleActionTableSetting> _dict = new Dictionary<int, BattleActionTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BattleActionTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BattleActionTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BattleActionTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BattleActionTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BattleActionTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BattleActionTableSetting.ParsePrimaryKey(row);
                        BattleActionTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BattleActionTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BattleActionTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BattleActionTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BattleActionTable
        /// </summary>
        public static BattleActionTableSetting Get(int primaryKey)
        {
            BattleActionTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BattleActionTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BattleActionTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public string  Name { get; private set;}
        
        /// <summary>
        /// 是否为被动效果
        /// </summary>
        public bool IsBuff { get; private set;}
        
        /// <summary>
        /// 优先级
        /// </summary>
        public int Priority { get; private set;}
        

        internal BattleActionTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_string (row.Values[1], ""); 
            IsBuff = row.Get_bool(row.Values[2], ""); 
            Priority = row.Get_int(row.Values[3], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "BattleBuffTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BattleBuffTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BattleBuffTable.txt"
        };
        internal static BattleBuffTableSettings _instance = new BattleBuffTableSettings();
        Dictionary<int, BattleBuffTableSetting> _dict = new Dictionary<int, BattleBuffTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BattleBuffTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BattleBuffTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BattleBuffTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BattleBuffTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BattleBuffTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BattleBuffTableSetting.ParsePrimaryKey(row);
                        BattleBuffTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BattleBuffTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BattleBuffTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BattleBuffTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BattleBuffTable
        /// </summary>
        public static BattleBuffTableSetting Get(int primaryKey)
        {
            BattleBuffTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BattleBuffTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BattleBuffTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public int Name { get; private set;}
        
        /// <summary>
        /// Buff描述
        /// </summary>
        public int Desc { get; private set;}
        
        /// <summary>
        /// Buff图标
        /// </summary>
        public int IconID { get; private set;}
        
        /// <summary>
        /// 是否可以叠加
        /// </summary>
        public bool IsOverlay { get; private set;}
        
        /// <summary>
        /// 默认层数
        /// </summary>
        public int DefaultLayer { get; private set;}
        
        /// <summary>
        /// 可叠加的最高层数
        /// </summary>
        public int MaxLayer { get; private set;}
        
        /// <summary>
        /// 驱散等级
        /// </summary>
        public int DispelGrade { get; private set;}
        
        /// <summary>
        /// Buff默认持续时间
        /// </summary>
        public int Time { get; private set;}
        
        /// <summary>
        /// Buff的效果触发时机
        /// </summary>
        public List<int> ActionTimes { get; private set;}
        
        /// <summary>
        /// Buff的效果类型,BattleActionType
        /// </summary>
        public List<int> ActionTypes { get; private set;}
        
        /// <summary>
        /// Buff效果的参数
        /// </summary>
        public List<int> ActionParams { get; private set;}
        
        /// <summary>
        /// 特效参数2
        /// </summary>
        public List<int> ActionParams2 { get; private set;}
        

        internal BattleBuffTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_int(row.Values[1], ""); 
            Desc = row.Get_int(row.Values[2], ""); 
            IconID = row.Get_int(row.Values[3], ""); 
            IsOverlay = row.Get_bool(row.Values[4], ""); 
            DefaultLayer = row.Get_int(row.Values[5], ""); 
            MaxLayer = row.Get_int(row.Values[6], ""); 
            DispelGrade = row.Get_int(row.Values[7], ""); 
            Time = row.Get_int(row.Values[8], ""); 
            ActionTimes = row.Get_List_int(row.Values[9], ""); 
            ActionTypes = row.Get_List_int(row.Values[10], ""); 
            ActionParams = row.Get_List_int(row.Values[11], ""); 
            ActionParams2 = row.Get_List_int(row.Values[12], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "BattleCardTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BattleCardTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BattleCardTable.txt"
        };
        internal static BattleCardTableSettings _instance = new BattleCardTableSettings();
        Dictionary<int, BattleCardTableSetting> _dict = new Dictionary<int, BattleCardTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BattleCardTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BattleCardTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BattleCardTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BattleCardTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BattleCardTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BattleCardTableSetting.ParsePrimaryKey(row);
                        BattleCardTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BattleCardTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BattleCardTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BattleCardTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BattleCardTable
        /// </summary>
        public static BattleCardTableSetting Get(int primaryKey)
        {
            BattleCardTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BattleCardTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BattleCardTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public int Name { get; private set;}
        
        /// <summary>
        /// 卡牌描述
        /// </summary>
        public int Desc { get; private set;}
        
        /// <summary>
        /// 额外描述
        /// </summary>
        public int ExtraDesc { get; private set;}
        
        /// <summary>
        /// 卡牌类型(攻击0,装备1,法术2,消耗品3)
        /// </summary>
        public int Type { get; private set;}
        
        /// <summary>
        /// 卡牌品质(白绿蓝紫橙)0开始
        /// </summary>
        public int Quality { get; private set;}
        
        /// <summary>
        /// 卡牌系列ID(0是没有系列)
        /// </summary>
        public int GroupId { get; private set;}
        
        /// <summary>
        /// 魔法开销
        /// </summary>
        public int Spending { get; private set;}
        
        /// <summary>
        /// 职业限制0通用
        /// </summary>
        public int ClassLimit { get; private set;}
        
        /// <summary>
        /// 左边半个图标
        /// </summary>
        public int IconLeftID { get; private set;}
        
        /// <summary>
        /// 右边半个图标
        /// </summary>
        public int IconRightID { get; private set;}
        
        /// <summary>
        /// 卡片展示ID
        /// </summary>
        public int ShowID { get; private set;}
        
        /// <summary>
        /// 卡片特效ID
        /// </summary>
        public int Effect { get; private set;}
        
        /// <summary>
        /// 购买开销
        /// </summary>
        public int Price { get; private set;}
        
        /// <summary>
        /// 特效类型(BattleActionType)
        /// </summary>
        public List<int> ActionTypes { get; private set;}
        
        /// <summary>
        /// 特效参数
        /// </summary>
        public List<int> ActionParams { get; private set;}
        
        /// <summary>
        /// 特效参数2
        /// </summary>
        public List<int> ActionParams2 { get; private set;}
        

        internal BattleCardTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_int(row.Values[1], ""); 
            Desc = row.Get_int(row.Values[2], ""); 
            ExtraDesc = row.Get_int(row.Values[3], ""); 
            Type = row.Get_int(row.Values[4], ""); 
            Quality = row.Get_int(row.Values[5], ""); 
            GroupId = row.Get_int(row.Values[6], ""); 
            Spending = row.Get_int(row.Values[7], ""); 
            ClassLimit = row.Get_int(row.Values[8], ""); 
            IconLeftID = row.Get_int(row.Values[9], ""); 
            IconRightID = row.Get_int(row.Values[10], ""); 
            ShowID = row.Get_int(row.Values[11], ""); 
            Effect = row.Get_int(row.Values[12], ""); 
            Price = row.Get_int(row.Values[13], ""); 
            ActionTypes = row.Get_List_int(row.Values[14], ""); 
            ActionParams = row.Get_List_int(row.Values[15], ""); 
            ActionParams2 = row.Get_List_int(row.Values[16], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "BattleEquipTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BattleEquipTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BattleEquipTable.txt"
        };
        internal static BattleEquipTableSettings _instance = new BattleEquipTableSettings();
        Dictionary<int, BattleEquipTableSetting> _dict = new Dictionary<int, BattleEquipTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BattleEquipTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BattleEquipTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BattleEquipTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BattleEquipTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BattleEquipTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BattleEquipTableSetting.ParsePrimaryKey(row);
                        BattleEquipTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BattleEquipTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BattleEquipTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BattleEquipTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BattleEquipTable
        /// </summary>
        public static BattleEquipTableSetting Get(int primaryKey)
        {
            BattleEquipTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BattleEquipTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BattleEquipTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public int Name { get; private set;}
        
        /// <summary>
        /// 装备描述
        /// </summary>
        public int Desc { get; private set;}
        
        /// <summary>
        /// 装备图标
        /// </summary>
        public int IconID { get; private set;}
        
        /// <summary>
        /// 装备类型(武器1,头盔2,防具3)
        /// </summary>
        public int Type { get; private set;}
        
        /// <summary>
        /// 次数
        /// </summary>
        public int Count { get; private set;}
        
        /// <summary>
        /// 装备的效果类型,BattleActionType
        /// </summary>
        public List<int> ActionTypes { get; private set;}
        
        /// <summary>
        /// 特效触发时机 1游戏开始,2回合开始,3回合结束,4受到伤害,5发起伤害,6使用卡牌,7抽卡
        /// </summary>
        public List<int> ActionTimes { get; private set;}
        
        /// <summary>
        /// 特效参数
        /// </summary>
        public List<int> ActionPrarms { get; private set;}
        
        /// <summary>
        /// 特效参数2
        /// </summary>
        public List<int> ActionParams2 { get; private set;}
        

        internal BattleEquipTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_int(row.Values[1], ""); 
            Desc = row.Get_int(row.Values[2], ""); 
            IconID = row.Get_int(row.Values[3], ""); 
            Type = row.Get_int(row.Values[4], ""); 
            Count = row.Get_int(row.Values[5], ""); 
            ActionTypes = row.Get_List_int(row.Values[6], ""); 
            ActionTimes = row.Get_List_int(row.Values[7], ""); 
            ActionPrarms = row.Get_List_int(row.Values[8], ""); 
            ActionParams2 = row.Get_List_int(row.Values[9], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "BattleMonsterTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BattleMonsterTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BattleMonsterTable.txt"
        };
        internal static BattleMonsterTableSettings _instance = new BattleMonsterTableSettings();
        Dictionary<int, BattleMonsterTableSetting> _dict = new Dictionary<int, BattleMonsterTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BattleMonsterTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BattleMonsterTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BattleMonsterTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BattleMonsterTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BattleMonsterTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BattleMonsterTableSetting.ParsePrimaryKey(row);
                        BattleMonsterTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BattleMonsterTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BattleMonsterTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BattleMonsterTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BattleMonsterTable
        /// </summary>
        public static BattleMonsterTableSetting Get(int primaryKey)
        {
            BattleMonsterTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BattleMonsterTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BattleMonsterTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public string  Name { get; private set;}
        
        /// <summary>
        /// 卡牌描述
        /// </summary>
        public string Desc { get; private set;}
        
        /// <summary>
        /// 怪物等级
        /// </summary>
        public int Level { get; private set;}
        
        /// <summary>
        /// 血量
        /// </summary>
        public int HP { get; private set;}
        
        /// <summary>
        /// 最大血量
        /// </summary>
        public int MaxHp { get; private set;}
        
        /// <summary>
        /// 蓝量
        /// </summary>
        public int MP { get; private set;}
        
        /// <summary>
        /// 蓝量
        /// </summary>
        public int MaxMP { get; private set;}
        
        /// <summary>
        /// 行动值
        /// </summary>
        public int AP { get; private set;}
        
        /// <summary>
        /// 最大行动值
        /// </summary>
        public int MaxAP { get; private set;}
        
        /// <summary>
        /// 技能ID
        /// </summary>
        public int SkillId { get; private set;}
        
        /// <summary>
        /// 图标
        /// </summary>
        public int IconId { get; private set;}
        
        /// <summary>
        /// 手上的卡组
        /// </summary>
        public List<int> BattleCards { get; private set;}
        
        /// <summary>
        /// 身上的buff
        /// </summary>
        public List<int> BuffIds { get; private set;}
        
        /// <summary>
        /// buff的参数
        /// </summary>
        public List<int> BuffParams { get; private set;}
        
        /// <summary>
        /// 装备的武器
        /// </summary>
        public List<int> EquipIds { get; private set;}
        
        /// <summary>
        /// #对话Id
        /// </summary>
        public int DialogId { get; private set;}
        
        /// <summary>
        /// 奖励
        /// </summary>
        public List<int> RewardIds { get; private set;}
        

        internal BattleMonsterTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_string (row.Values[1], ""); 
            Desc = row.Get_string(row.Values[2], ""); 
            Level = row.Get_int(row.Values[3], ""); 
            HP = row.Get_int(row.Values[4], ""); 
            MaxHp = row.Get_int(row.Values[5], ""); 
            MP = row.Get_int(row.Values[6], ""); 
            MaxMP = row.Get_int(row.Values[7], ""); 
            AP = row.Get_int(row.Values[8], ""); 
            MaxAP = row.Get_int(row.Values[9], ""); 
            SkillId = row.Get_int(row.Values[10], ""); 
            IconId = row.Get_int(row.Values[11], ""); 
            BattleCards = row.Get_List_int(row.Values[12], ""); 
            BuffIds = row.Get_List_int(row.Values[13], ""); 
            BuffParams = row.Get_List_int(row.Values[14], ""); 
            EquipIds = row.Get_List_int(row.Values[15], ""); 
            DialogId = row.Get_int(row.Values[16], ""); 
            RewardIds = row.Get_List_int(row.Values[17], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "BoxTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class BoxTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "BoxTable.txt"
        };
        internal static BoxTableSettings _instance = new BoxTableSettings();
        Dictionary<int, BoxTableSetting> _dict = new Dictionary<int, BoxTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private BoxTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static BoxTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: BoxTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : BoxTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: BoxTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = BoxTableSetting.ParsePrimaryKey(row);
                        BoxTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new BoxTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: BoxTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: BoxTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: BoxTable
        /// </summary>
        public static BoxTableSetting Get(int primaryKey)
        {
            BoxTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "BoxTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class BoxTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// #对话Id
        /// </summary>
        public int DialogId { get; private set;}
        

        internal BoxTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            DialogId = row.Get_int(row.Values[1], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "CharacterModelTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class CharacterModelTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "CharacterModelTable.txt"
        };
        internal static CharacterModelTableSettings _instance = new CharacterModelTableSettings();
        Dictionary<int, CharacterModelTableSetting> _dict = new Dictionary<int, CharacterModelTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private CharacterModelTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static CharacterModelTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: CharacterModelTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : CharacterModelTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: CharacterModelTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = CharacterModelTableSetting.ParsePrimaryKey(row);
                        CharacterModelTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new CharacterModelTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: CharacterModelTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: CharacterModelTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: CharacterModelTable
        /// </summary>
        public static CharacterModelTableSetting Get(int primaryKey)
        {
            CharacterModelTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "CharacterModelTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class CharacterModelTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 路径
        /// </summary>
        public string Path { get; private set;}
        

        internal CharacterModelTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Path = row.Get_string(row.Values[1], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "ClassCharacterTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class ClassCharacterTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "ClassCharacterTable.txt"
        };
        internal static ClassCharacterTableSettings _instance = new ClassCharacterTableSettings();
        Dictionary<int, ClassCharacterTableSetting> _dict = new Dictionary<int, ClassCharacterTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private ClassCharacterTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static ClassCharacterTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: ClassCharacterTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : ClassCharacterTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: ClassCharacterTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = ClassCharacterTableSetting.ParsePrimaryKey(row);
                        ClassCharacterTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new ClassCharacterTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: ClassCharacterTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: ClassCharacterTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: ClassCharacterTable
        /// </summary>
        public static ClassCharacterTableSetting Get(int primaryKey)
        {
            ClassCharacterTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "ClassCharacterTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class ClassCharacterTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 文本
        /// </summary>
        public string  Name { get; private set;}
        
        /// <summary>
        /// 卡牌描述
        /// </summary>
        public string Desc { get; private set;}
        
        /// <summary>
        /// 当前职业
        /// </summary>
        public int ClassType { get; private set;}
        
        /// <summary>
        /// 职业头像
        /// </summary>
        public int IconID { get; private set;}
        
        /// <summary>
        /// 职业贴图
        /// </summary>
        public int Image { get; private set;}
        
        /// <summary>
        /// 模型ID
        /// </summary>
        public int ModelID { get; private set;}
        
        /// <summary>
        /// 职业技能
        /// </summary>
        public int MapSkillId { get; private set;}
        
        /// <summary>
        /// 战斗技能
        /// </summary>
        public int BattleSkillId { get; private set;}
        
        /// <summary>
        /// 选择后对话
        /// </summary>
        public int ChooseText { get; private set;}
        
        /// <summary>
        /// 默认手牌
        /// </summary>
        public List<int> DefaultCardList { get; private set;}
        

        internal ClassCharacterTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_string (row.Values[1], ""); 
            Desc = row.Get_string(row.Values[2], ""); 
            ClassType = row.Get_int(row.Values[3], ""); 
            IconID = row.Get_int(row.Values[4], ""); 
            Image = row.Get_int(row.Values[5], ""); 
            ModelID = row.Get_int(row.Values[6], ""); 
            MapSkillId = row.Get_int(row.Values[7], ""); 
            BattleSkillId = row.Get_int(row.Values[8], ""); 
            ChooseText = row.Get_int(row.Values[9], ""); 
            DefaultCardList = row.Get_List_int(row.Values[10], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "DialogTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class DialogTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "DialogTable.txt"
        };
        internal static DialogTableSettings _instance = new DialogTableSettings();
        Dictionary<int, DialogTableSetting> _dict = new Dictionary<int, DialogTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private DialogTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static DialogTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: DialogTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : DialogTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: DialogTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = DialogTableSetting.ParsePrimaryKey(row);
                        DialogTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new DialogTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: DialogTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: DialogTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: DialogTable
        /// </summary>
        public static DialogTableSetting Get(int primaryKey)
        {
            DialogTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "DialogTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class DialogTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// #文本
        /// </summary>
        public string Text { get; private set;}
        
        /// <summary>
        /// #类型(1正常对话，2选项，3事件，4战斗）
        /// </summary>
        public int Type { get; private set;}
        
        /// <summary>
        /// #下一目录（组）（事件为事件ID+成功对话Id+失败对话Id，战斗为怪物代码）
        /// </summary>
        public List<int> NextIds { get; private set;}
        
        /// <summary>
        /// #头像图片路径
        /// </summary>
        public int ImagePath { get; private set;}
        

        internal DialogTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Text = row.Get_string(row.Values[1], ""); 
            Type = row.Get_int(row.Values[2], "1"); 
            NextIds = row.Get_List_int(row.Values[3], ""); 
            ImagePath = row.Get_int(row.Values[4], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "LevelTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class LevelTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "LevelTable.txt"
        };
        internal static LevelTableSettings _instance = new LevelTableSettings();
        Dictionary<int, LevelTableSetting> _dict = new Dictionary<int, LevelTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private LevelTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static LevelTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: LevelTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : LevelTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: LevelTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = LevelTableSetting.ParsePrimaryKey(row);
                        LevelTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new LevelTableSetting(row);
                            _dict[setting.Lv] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: LevelTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: LevelTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: LevelTable
        /// </summary>
        public static LevelTableSetting Get(int primaryKey)
        {
            LevelTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "LevelTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class LevelTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #Level
        /// </summary>
        public int Lv { get; private set;}
        
        /// <summary>
        /// 最大血量
        /// </summary>
        public List<int> HP { get; private set;}
        
        /// <summary>
        /// 最大MP
        /// </summary>
        public List<int> MP { get; private set;}
        
        /// <summary>
        /// 最大食物
        /// </summary>
        public List<int> Food { get; private set;}
        
        /// <summary>
        /// 手牌最大数量
        /// </summary>
        public List<int> CardCount { get; private set;}
        
        /// <summary>
        /// 升到下一级所需经验
        /// </summary>
        public List<int> Exp { get; private set;}
        

        internal LevelTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Lv = row.Get_int(row.Values[0], ""); 
            HP = row.Get_List_int(row.Values[1], ""); 
            MP = row.Get_List_int(row.Values[2], ""); 
            Food = row.Get_List_int(row.Values[3], ""); 
            CardCount = row.Get_List_int(row.Values[4], ""); 
            Exp = row.Get_List_int(row.Values[5], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "LocalizationTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class LocalizationTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "LocalizationTable.txt"
        };
        internal static LocalizationTableSettings _instance = new LocalizationTableSettings();
        Dictionary<int, LocalizationTableSetting> _dict = new Dictionary<int, LocalizationTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private LocalizationTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static LocalizationTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: LocalizationTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : LocalizationTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: LocalizationTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = LocalizationTableSetting.ParsePrimaryKey(row);
                        LocalizationTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new LocalizationTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: LocalizationTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: LocalizationTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: LocalizationTable
        /// </summary>
        public static LocalizationTableSetting Get(int primaryKey)
        {
            LocalizationTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "LocalizationTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class LocalizationTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 中文
        /// </summary>
        public string ChineseSimplified { get; private set;}
        
        /// <summary>
        /// 繁体
        /// </summary>
        public string ChineseTraditional { get; private set;}
        
        /// <summary>
        /// 英文
        /// </summary>
        public string English { get; private set;}
        

        internal LocalizationTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            ChineseSimplified = row.Get_string(row.Values[1], ""); 
            ChineseTraditional = row.Get_string(row.Values[2], ""); 
            English = row.Get_string(row.Values[3], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "NpcTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class NpcTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "NpcTable.txt"
        };
        internal static NpcTableSettings _instance = new NpcTableSettings();
        Dictionary<int, NpcTableSetting> _dict = new Dictionary<int, NpcTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private NpcTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static NpcTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: NpcTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : NpcTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: NpcTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = NpcTableSetting.ParsePrimaryKey(row);
                        NpcTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new NpcTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: NpcTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: NpcTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: NpcTable
        /// </summary>
        public static NpcTableSetting Get(int primaryKey)
        {
            NpcTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "NpcTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class NpcTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// #对话Id
        /// </summary>
        public int DialogId { get; private set;}
        

        internal NpcTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            DialogId = row.Get_int(row.Values[1], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "PromptTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class PromptTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "PromptTable.txt"
        };
        internal static PromptTableSettings _instance = new PromptTableSettings();
        Dictionary<int, PromptTableSetting> _dict = new Dictionary<int, PromptTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private PromptTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static PromptTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: PromptTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : PromptTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: PromptTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = PromptTableSetting.ParsePrimaryKey(row);
                        PromptTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new PromptTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: PromptTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: PromptTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: PromptTable
        /// </summary>
        public static PromptTableSetting Get(int primaryKey)
        {
            PromptTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "PromptTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class PromptTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// #图片路径
        /// </summary>
        public string ImagePath { get; private set;}
        
        /// <summary>
        /// #名称
        /// </summary>
        public string Name { get; private set;}
        
        /// <summary>
        /// #描述
        /// </summary>
        public string Describe { get; private set;}
        
        /// <summary>
        /// #类型（1buff，2装备）
        /// </summary>
        public int type { get; private set;}
        

        internal PromptTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            ImagePath = row.Get_string(row.Values[1], ""); 
            Name = row.Get_string(row.Values[2], ""); 
            Describe = row.Get_string(row.Values[3], ""); 
            type = row.Get_int(row.Values[4], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "RewardTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class RewardTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "RewardTable.txt"
        };
        internal static RewardTableSettings _instance = new RewardTableSettings();
        Dictionary<int, RewardTableSetting> _dict = new Dictionary<int, RewardTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private RewardTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static RewardTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: RewardTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : RewardTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: RewardTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = RewardTableSetting.ParsePrimaryKey(row);
                        RewardTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new RewardTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: RewardTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: RewardTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: RewardTable
        /// </summary>
        public static RewardTableSetting Get(int primaryKey)
        {
            RewardTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "RewardTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class RewardTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 奖励文本，富文本形式
        /// </summary>
        public string Text { get; private set;}
        
        /// <summary>
        /// 金币
        /// </summary>
        public int gold { get; private set;}
        
        /// <summary>
        /// 钻石
        /// </summary>
        public int diamond { get; private set;}
        
        /// <summary>
        /// 经验
        /// </summary>
        public int exp { get; private set;}
        
        /// <summary>
        /// 奖励物品
        /// </summary>
        public List<int> CardList { get; private set;}
        

        internal RewardTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Text = row.Get_string(row.Values[1], ""); 
            gold = row.Get_int(row.Values[2], ""); 
            diamond = row.Get_int(row.Values[3], ""); 
            exp = row.Get_int(row.Values[4], ""); 
            CardList = row.Get_List_int(row.Values[5], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "SceneTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class SceneTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "SceneTable.txt"
        };
        internal static SceneTableSettings _instance = new SceneTableSettings();
        Dictionary<int, SceneTableSetting> _dict = new Dictionary<int, SceneTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private SceneTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static SceneTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: SceneTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : SceneTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: SceneTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = SceneTableSetting.ParsePrimaryKey(row);
                        SceneTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new SceneTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: SceneTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: SceneTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: SceneTable
        /// </summary>
        public static SceneTableSetting Get(int primaryKey)
        {
            SceneTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "SceneTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class SceneTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 场景名
        /// </summary>
        public string Name { get; private set;}
        
        /// <summary>
        /// 路径
        /// </summary>
        public string Path { get; private set;}
        
        /// <summary>
        /// 场景逻辑
        /// </summary>
        public string Procedure { get; private set;}
        

        internal SceneTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Name = row.Get_string(row.Values[1], ""); 
            Path = row.Get_string(row.Values[2], ""); 
            Procedure = row.Get_string(row.Values[3], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "ShopTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class ShopTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "ShopTable.txt"
        };
        internal static ShopTableSettings _instance = new ShopTableSettings();
        Dictionary<int, ShopTableSetting> _dict = new Dictionary<int, ShopTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private ShopTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static ShopTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: ShopTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : ShopTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: ShopTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = ShopTableSetting.ParsePrimaryKey(row);
                        ShopTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new ShopTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: ShopTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: ShopTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: ShopTable
        /// </summary>
        public static ShopTableSetting Get(int primaryKey)
        {
            ShopTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "ShopTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class ShopTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// #对话Id
        /// </summary>
        public int DialogId { get; private set;}
        

        internal ShopTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            DialogId = row.Get_int(row.Values[1], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "TextureTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class TextureTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "TextureTable.txt"
        };
        internal static TextureTableSettings _instance = new TextureTableSettings();
        Dictionary<int, TextureTableSetting> _dict = new Dictionary<int, TextureTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private TextureTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static TextureTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: TextureTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : TextureTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: TextureTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = TextureTableSetting.ParsePrimaryKey(row);
                        TextureTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new TextureTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: TextureTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: TextureTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: TextureTable
        /// </summary>
        public static TextureTableSetting Get(int primaryKey)
        {
            TextureTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "TextureTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class TextureTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #ID
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// 路径
        /// </summary>
        public string Path { get; private set;}
        

        internal TextureTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Path = row.Get_string(row.Values[1], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}

	/// <summary>
	/// Auto Generate for Tab File: "TradeTable.txt"
    /// No use of generic and reflection, for better performance,  less IL code generating
	/// </summary>>
    public partial class TradeTableSettings : IReloadableSettings
    {
        /// <summary>
        /// How many reload function load?
        /// </summary>>
        public static int ReloadCount { get; private set; }

		public static readonly string[] TabFilePaths = 
        {
            "TradeTable.txt"
        };
        internal static TradeTableSettings _instance = new TradeTableSettings();
        Dictionary<int, TradeTableSetting> _dict = new Dictionary<int, TradeTableSetting>();

        /// <summary>
        /// Trigger delegate when reload the Settings
        /// </summary>>
	    public static System.Action OnReload;

        /// <summary>
        /// Constructor, just reload(init)
        /// When Unity Editor mode, will watch the file modification and auto reload
        /// </summary>
	    private TradeTableSettings()
	    {
        }

        /// <summary>
        /// Get the singleton
        /// </summary>
        /// <returns></returns>
	    public static TradeTableSettings GetInstance()
	    {
            if (ReloadCount == 0)
            {
                _instance._ReloadAll(true);
    #if UNITY_EDITOR
                if (SettingModule.IsFileSystemMode)
                {
                    for (var j = 0; j < TabFilePaths.Length; j++)
                    {
                        var tabFilePath = TabFilePaths[j];
                        SettingModule.WatchSetting(tabFilePath, (path) =>
                        {
                            if (path.Replace("\\", "/").EndsWith(path))
                            {
                                _instance.ReloadAll();
                                Log.LogConsole_MultiThread("File Watcher! Reload success! -> " + path);
                            }
                        });
                    }

                }
    #endif
            }

	        return _instance;
	    }
        
        public int Count
        {
            get
            {
                return _dict.Count;
            }
        }

        /// <summary>
        /// Do reload the setting file: TradeTable, no exception when duplicate primary key
        /// </summary>
        public void ReloadAll()
        {
            _ReloadAll(false);
        }

        /// <summary>
        /// Do reload the setting class : TradeTable, no exception when duplicate primary key, use custom string content
        /// </summary>
        public void ReloadAllWithString(string context)
        {
            _ReloadAll(false, context);
        }

        /// <summary>
        /// Do reload the setting file: TradeTable
        /// </summary>
	    void _ReloadAll(bool throwWhenDuplicatePrimaryKey, string customContent = null)
        {
            for (var j = 0; j < TabFilePaths.Length; j++)
            {
                var tabFilePath = TabFilePaths[j];
                TableFile tableFile;
                if (customContent == null)
                    tableFile = SettingModule.Get(tabFilePath, false);
                else
                    tableFile = TableFile.LoadFromString(customContent);

                using (tableFile)
                {
                    foreach (var row in tableFile)
                    {
                        var pk = TradeTableSetting.ParsePrimaryKey(row);
                        TradeTableSetting setting;
                        if (!_dict.TryGetValue(pk, out setting))
                        {
                            setting = new TradeTableSetting(row);
                            _dict[setting.Id] = setting;
                        }
                        else 
                        {
                            if (throwWhenDuplicatePrimaryKey) throw new System.Exception(string.Format("DuplicateKey, Class: {0}, File: {1}, Key: {2}", this.GetType().Name, tabFilePath, pk));
                            else setting.Reload(row);
                        }
                    }
                }
            }

	        if (OnReload != null)
	        {
	            OnReload();
	        }

            ReloadCount++;
            Log.Info("Reload settings: {0}, Row Count: {1}, Reload Count: {2}", GetType(), Count, ReloadCount);
        }

	    /// <summary>
        /// foreachable enumerable: TradeTable
        /// </summary>
        public static IEnumerable GetAll()
        {
            foreach (var row in GetInstance()._dict.Values)
            {
                yield return row;
            }
        }

        /// <summary>
        /// GetEnumerator for `MoveNext`: TradeTable
        /// </summary> 
	    public static IEnumerator GetEnumerator()
	    {
	        return GetInstance()._dict.Values.GetEnumerator();
	    }
         
	    /// <summary>
        /// Get class by primary key: TradeTable
        /// </summary>
        public static TradeTableSetting Get(int primaryKey)
        {
            TradeTableSetting setting;
            if (GetInstance()._dict.TryGetValue(primaryKey, out setting)) return setting;
            return null;
        }

        // ========= CustomExtraString begin ===========
        
        // ========= CustomExtraString end ===========
    }

	/// <summary>
	/// Auto Generate for Tab File: "TradeTable.txt"
    /// Singleton class for less memory use
	/// </summary>
	public partial class TradeTableSetting : TableRowFieldParser
	{
		
        /// <summary>
        /// #目录
        /// </summary>
        public int Id { get; private set;}
        
        /// <summary>
        /// #事件类型 1血量改变，2食物改变，3蓝量，4金钱，5卡片，6剧情物品/标志
        /// </summary>
        public int Type { get; private set;}
        
        /// <summary>
        /// 物品/卡片的id
        /// </summary>
        public int ItemId { get; private set;}
        
        /// <summary>
        /// 改变数量
        /// </summary>
        public int Num { get; private set;}
        
        /// <summary>
        /// 花费类型
        /// </summary>
        public int CostType { get; private set;}
        
        /// <summary>
        /// 花费的物品id
        /// </summary>
        public int CostItemId { get; private set;}
        
        /// <summary>
        /// 花费数量
        /// </summary>
        public int CostNum { get; private set;}
        

        internal TradeTableSetting(TableFileRow row)
        {
            Reload(row);
        }

        internal void Reload(TableFileRow row)
        { 
            Id = row.Get_int(row.Values[0], ""); 
            Type = row.Get_int(row.Values[1], ""); 
            ItemId = row.Get_int(row.Values[2], ""); 
            Num = row.Get_int(row.Values[3], ""); 
            CostType = row.Get_int(row.Values[4], ""); 
            CostItemId = row.Get_int(row.Values[5], ""); 
            CostNum = row.Get_int(row.Values[6], ""); 
        }

        /// <summary>
        /// Get PrimaryKey from a table row
        /// </summary>
        /// <param name="row"></param>
        /// <returns></returns>
        public static int ParsePrimaryKey(TableFileRow row)
        {
            var primaryKey = row.Get_int(row.Values[0], "");
            return primaryKey;
        }
	}
 
}
