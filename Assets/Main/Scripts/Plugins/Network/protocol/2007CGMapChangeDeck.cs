// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 2007_CGMapChangeDeck.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BigHead.protocol {

  /// <summary>Holder for reflection information generated from 2007_CGMapChangeDeck.proto</summary>
  public static partial class CGMapChangeDeckReflection {

    #region Descriptor
    /// <summary>File descriptor for 2007_CGMapChangeDeck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CGMapChangeDeckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChoyMDA3X0NHTWFwQ2hhbmdlRGVjay5wcm90bxoMUEJEZWNrLnByb3RvIjsK",
            "D0NHTWFwQ2hhbmdlRGVjaxIRCglwbGF5ZXJfaWQYASABKAQSFQoEZGVjaxgC",
            "IAEoCzIHLlBCRGVja0JLCh1jb20ud2hhbGVpc2xhbmQuZ2FtZS5wcm90b2Nv",
            "bEIXQ0dNYXBDaGFuZ2VEZWNrUHJvdG9jb2yqAhBCaWdIZWFkLnByb3RvY29s",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BigHead.protocol.PBDeckReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BigHead.protocol.CGMapChangeDeck), global::BigHead.protocol.CGMapChangeDeck.Parser, new[]{ "PlayerId", "Deck" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 在地图上面购买物品
  /// </summary>
  public sealed partial class CGMapChangeDeck : pb::IMessage<CGMapChangeDeck> {
    private static readonly pb::MessageParser<CGMapChangeDeck> _parser = new pb::MessageParser<CGMapChangeDeck>(() => new CGMapChangeDeck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGMapChangeDeck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BigHead.protocol.CGMapChangeDeckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapChangeDeck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapChangeDeck(CGMapChangeDeck other) : this() {
      playerId_ = other.playerId_;
      Deck = other.deck_ != null ? other.Deck.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapChangeDeck Clone() {
      return new CGMapChangeDeck(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "deck" field.</summary>
    public const int DeckFieldNumber = 2;
    private global::BigHead.protocol.PBDeck deck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BigHead.protocol.PBDeck Deck {
      get { return deck_; }
      set {
        deck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGMapChangeDeck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGMapChangeDeck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Deck, other.Deck)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (deck_ != null) hash ^= Deck.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (deck_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Deck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (deck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deck);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGMapChangeDeck other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.deck_ != null) {
        if (deck_ == null) {
          deck_ = new global::BigHead.protocol.PBDeck();
        }
        Deck.MergeFrom(other.Deck);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (deck_ == null) {
              deck_ = new global::BigHead.protocol.PBDeck();
            }
            input.ReadMessage(deck_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
