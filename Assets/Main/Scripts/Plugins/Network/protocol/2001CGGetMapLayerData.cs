// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 2001_CGGetMapLayerData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BigHead.protocol {

  /// <summary>Holder for reflection information generated from 2001_CGGetMapLayerData.proto</summary>
  public static partial class CGGetMapLayerDataReflection {

    #region Descriptor
    /// <summary>File descriptor for 2001_CGGetMapLayerData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CGGetMapLayerDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChwyMDAxX0NHR2V0TWFwTGF5ZXJEYXRhLnByb3RvImEKEUNHR2V0TWFwTGF5",
            "ZXJEYXRhEhMKC2xheWVyX2luZGV4GAEgASgFEhMKC2luc3RhbmNlX2lkGAIg",
            "ASgFEhAKCHBsYXllcl94GAMgASgFEhAKCHBsYXllcl95GAQgASgFQk0KHWNv",
            "bS53aGFsZWlzbGFuZC5nYW1lLnByb3RvY29sQhlDR0dldE1hcExheWVyRGF0",
            "YVByb3RvY29sqgIQQmlnSGVhZC5wcm90b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BigHead.protocol.CGGetMapLayerData), global::BigHead.protocol.CGGetMapLayerData.Parser, new[]{ "LayerIndex", "InstanceId", "PlayerX", "PlayerY" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request to Enter the instance
  /// </summary>
  public sealed partial class CGGetMapLayerData : pb::IMessage<CGGetMapLayerData> {
    private static readonly pb::MessageParser<CGGetMapLayerData> _parser = new pb::MessageParser<CGGetMapLayerData>(() => new CGGetMapLayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGGetMapLayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BigHead.protocol.CGGetMapLayerDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGGetMapLayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGGetMapLayerData(CGGetMapLayerData other) : this() {
      layerIndex_ = other.layerIndex_;
      instanceId_ = other.instanceId_;
      playerX_ = other.playerX_;
      playerY_ = other.playerY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGGetMapLayerData Clone() {
      return new CGGetMapLayerData(this);
    }

    /// <summary>Field number for the "layer_index" field.</summary>
    public const int LayerIndexFieldNumber = 1;
    private int layerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayerIndex {
      get { return layerIndex_; }
      set {
        layerIndex_ = value;
      }
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private int instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "player_x" field.</summary>
    public const int PlayerXFieldNumber = 3;
    private int playerX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerX {
      get { return playerX_; }
      set {
        playerX_ = value;
      }
    }

    /// <summary>Field number for the "player_y" field.</summary>
    public const int PlayerYFieldNumber = 4;
    private int playerY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerY {
      get { return playerY_; }
      set {
        playerY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGGetMapLayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGGetMapLayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LayerIndex != other.LayerIndex) return false;
      if (InstanceId != other.InstanceId) return false;
      if (PlayerX != other.PlayerX) return false;
      if (PlayerY != other.PlayerY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LayerIndex != 0) hash ^= LayerIndex.GetHashCode();
      if (InstanceId != 0) hash ^= InstanceId.GetHashCode();
      if (PlayerX != 0) hash ^= PlayerX.GetHashCode();
      if (PlayerY != 0) hash ^= PlayerY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LayerIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LayerIndex);
      }
      if (InstanceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InstanceId);
      }
      if (PlayerX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerX);
      }
      if (PlayerY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerIndex);
      }
      if (InstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceId);
      }
      if (PlayerX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerX);
      }
      if (PlayerY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGGetMapLayerData other) {
      if (other == null) {
        return;
      }
      if (other.LayerIndex != 0) {
        LayerIndex = other.LayerIndex;
      }
      if (other.InstanceId != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.PlayerX != 0) {
        PlayerX = other.PlayerX;
      }
      if (other.PlayerY != 0) {
        PlayerY = other.PlayerY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LayerIndex = input.ReadInt32();
            break;
          }
          case 16: {
            InstanceId = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerX = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
