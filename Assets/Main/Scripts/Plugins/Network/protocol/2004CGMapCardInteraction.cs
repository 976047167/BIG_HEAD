// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 2004_CGMapCardInteraction.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BigHead.protocol {

  /// <summary>Holder for reflection information generated from 2004_CGMapCardInteraction.proto</summary>
  public static partial class CGMapCardInteractionReflection {

    #region Descriptor
    /// <summary>File descriptor for 2004_CGMapCardInteraction.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CGMapCardInteractionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch8yMDA0X0NHTWFwQ2FyZEludGVyYWN0aW9uLnByb3RvInAKFENHTWFwQ2Fy",
            "ZEludGVyYWN0aW9uEhEKCWNhcmRfdHlwZRgBIAEoBRIPCgdjYXJkX2lkGAIg",
            "ASgFEhgKEGludGVyYWN0aW9uX3R5cGUYAyABKAUSGgoSaW50ZXJhY3Rpb25f",
            "c2VsZWN0GAQgASgFQlAKHWNvbS53aGFsZWlzbGFuZC5nYW1lLnByb3RvY29s",
            "QhxDR01hcENhcmRJbnRlcmFjdGlvblByb3RvY29sqgIQQmlnSGVhZC5wcm90",
            "b2NvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BigHead.protocol.CGMapCardInteraction), global::BigHead.protocol.CGMapCardInteraction.Parser, new[]{ "CardType", "CardId", "InteractionType", "InteractionSelect" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 与地图卡的交互
  /// </summary>
  public sealed partial class CGMapCardInteraction : pb::IMessage<CGMapCardInteraction> {
    private static readonly pb::MessageParser<CGMapCardInteraction> _parser = new pb::MessageParser<CGMapCardInteraction>(() => new CGMapCardInteraction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGMapCardInteraction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BigHead.protocol.CGMapCardInteractionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapCardInteraction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapCardInteraction(CGMapCardInteraction other) : this() {
      cardType_ = other.cardType_;
      cardId_ = other.cardId_;
      interactionType_ = other.interactionType_;
      interactionSelect_ = other.interactionSelect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapCardInteraction Clone() {
      return new CGMapCardInteraction(this);
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private int cardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 2;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "interaction_type" field.</summary>
    public const int InteractionTypeFieldNumber = 3;
    private int interactionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InteractionType {
      get { return interactionType_; }
      set {
        interactionType_ = value;
      }
    }

    /// <summary>Field number for the "interaction_select" field.</summary>
    public const int InteractionSelectFieldNumber = 4;
    private int interactionSelect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InteractionSelect {
      get { return interactionSelect_; }
      set {
        interactionSelect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGMapCardInteraction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGMapCardInteraction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardType != other.CardType) return false;
      if (CardId != other.CardId) return false;
      if (InteractionType != other.InteractionType) return false;
      if (InteractionSelect != other.InteractionSelect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (InteractionType != 0) hash ^= InteractionType.GetHashCode();
      if (InteractionSelect != 0) hash ^= InteractionSelect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardType);
      }
      if (CardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardId);
      }
      if (InteractionType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(InteractionType);
      }
      if (InteractionSelect != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InteractionSelect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (InteractionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InteractionType);
      }
      if (InteractionSelect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InteractionSelect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGMapCardInteraction other) {
      if (other == null) {
        return;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.InteractionType != 0) {
        InteractionType = other.InteractionType;
      }
      if (other.InteractionSelect != 0) {
        InteractionSelect = other.InteractionSelect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardType = input.ReadInt32();
            break;
          }
          case 16: {
            CardId = input.ReadInt32();
            break;
          }
          case 24: {
            InteractionType = input.ReadInt32();
            break;
          }
          case 32: {
            InteractionSelect = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
