// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 2002_GCMapGetReward.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BigHead.protocol {

  /// <summary>Holder for reflection information generated from 2002_GCMapGetReward.proto</summary>
  public static partial class GCMapGetRewardReflection {

    #region Descriptor
    /// <summary>File descriptor for 2002_GCMapGetReward.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GCMapGetRewardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChkyMDAyX0dDTWFwR2V0UmV3YXJkLnByb3RvIsICCg5HQ01hcEdldFJld2Fy",
            "ZBISCgphY2NvdW50X2lkGAEgASgEEhEKCXBsYXllcl9pZBgCIAEoBBIQCghk",
            "aWFtb25kcxgDIAEoBRIRCglvbGRfbGV2ZWwYBCABKAUSDwoHb2xkX2V4cBgF",
            "IAEoBRIRCglhZGRlZF9leHAYBiABKAUSCgoCaHAYByABKAUSCgoCbXAYCCAB",
            "KAUSDAoEZm9vZBgJIAEoBRIMCgRnb2xkGAogASgFEg0KBWNhcmRzGAsgAygF",
            "EhIKCmNhcmRfdGVtcHMYDCADKAUSDQoFaXRlbXMYDSADKAUSEgoKaXRlbV90",
            "ZW1wcxgOIAMoBRINCgVidWZmcxgPIAMoBRISCgpidWZmX3RlbXBzGBAgAygF",
            "Eg4KBmVxdWlwcxgRIAMoBRITCgtlcXVpcF90ZW1wcxgSIAMoBUJKCh1jb20u",
            "d2hhbGVpc2xhbmQuZ2FtZS5wcm90b2NvbEIWR0NNYXBHZXRSZXdhcmRQcm90",
            "b2NvbKoCEEJpZ0hlYWQucHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BigHead.protocol.GCMapGetReward), global::BigHead.protocol.GCMapGetReward.Parser, new[]{ "AccountId", "PlayerId", "Diamonds", "OldLevel", "OldExp", "AddedExp", "Hp", "Mp", "Food", "Gold", "Cards", "CardTemps", "Items", "ItemTemps", "Buffs", "BuffTemps", "Equips", "EquipTemps" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request to Enter the instance
  /// </summary>
  public sealed partial class GCMapGetReward : pb::IMessage<GCMapGetReward> {
    private static readonly pb::MessageParser<GCMapGetReward> _parser = new pb::MessageParser<GCMapGetReward>(() => new GCMapGetReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GCMapGetReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BigHead.protocol.GCMapGetRewardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GCMapGetReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GCMapGetReward(GCMapGetReward other) : this() {
      accountId_ = other.accountId_;
      playerId_ = other.playerId_;
      diamonds_ = other.diamonds_;
      oldLevel_ = other.oldLevel_;
      oldExp_ = other.oldExp_;
      addedExp_ = other.addedExp_;
      hp_ = other.hp_;
      mp_ = other.mp_;
      food_ = other.food_;
      gold_ = other.gold_;
      cards_ = other.cards_.Clone();
      cardTemps_ = other.cardTemps_.Clone();
      items_ = other.items_.Clone();
      itemTemps_ = other.itemTemps_.Clone();
      buffs_ = other.buffs_.Clone();
      buffTemps_ = other.buffTemps_.Clone();
      equips_ = other.equips_.Clone();
      equipTemps_ = other.equipTemps_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GCMapGetReward Clone() {
      return new GCMapGetReward(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private ulong accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "diamonds" field.</summary>
    public const int DiamondsFieldNumber = 3;
    private int diamonds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamonds {
      get { return diamonds_; }
      set {
        diamonds_ = value;
      }
    }

    /// <summary>Field number for the "old_level" field.</summary>
    public const int OldLevelFieldNumber = 4;
    private int oldLevel_;
    /// <summary>
    ///old
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldLevel {
      get { return oldLevel_; }
      set {
        oldLevel_ = value;
      }
    }

    /// <summary>Field number for the "old_exp" field.</summary>
    public const int OldExpFieldNumber = 5;
    private int oldExp_;
    /// <summary>
    ///old
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldExp {
      get { return oldExp_; }
      set {
        oldExp_ = value;
      }
    }

    /// <summary>Field number for the "added_exp" field.</summary>
    public const int AddedExpFieldNumber = 6;
    private int addedExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedExp {
      get { return addedExp_; }
      set {
        addedExp_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 7;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 8;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "food" field.</summary>
    public const int FoodFieldNumber = 9;
    private int food_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Food {
      get { return food_; }
      set {
        food_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 10;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "card_temps" field.</summary>
    public const int CardTempsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_cardTemps_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> cardTemps_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///是否是临时卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardTemps {
      get { return cardTemps_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_items_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "item_temps" field.</summary>
    public const int ItemTempsFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_itemTemps_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> itemTemps_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///是否是临时卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemTemps {
      get { return itemTemps_; }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_buffs_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> buffs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "buff_temps" field.</summary>
    public const int BuffTempsFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_buffTemps_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> buffTemps_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///是否是临时卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuffTemps {
      get { return buffTemps_; }
    }

    /// <summary>Field number for the "equips" field.</summary>
    public const int EquipsFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_equips_codec
        = pb::FieldCodec.ForInt32(138);
    private readonly pbc::RepeatedField<int> equips_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "equip_temps" field.</summary>
    public const int EquipTempsFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_equipTemps_codec
        = pb::FieldCodec.ForInt32(146);
    private readonly pbc::RepeatedField<int> equipTemps_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///是否是临时卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> EquipTemps {
      get { return equipTemps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GCMapGetReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GCMapGetReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Diamonds != other.Diamonds) return false;
      if (OldLevel != other.OldLevel) return false;
      if (OldExp != other.OldExp) return false;
      if (AddedExp != other.AddedExp) return false;
      if (Hp != other.Hp) return false;
      if (Mp != other.Mp) return false;
      if (Food != other.Food) return false;
      if (Gold != other.Gold) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!cardTemps_.Equals(other.cardTemps_)) return false;
      if(!items_.Equals(other.items_)) return false;
      if(!itemTemps_.Equals(other.itemTemps_)) return false;
      if(!buffs_.Equals(other.buffs_)) return false;
      if(!buffTemps_.Equals(other.buffTemps_)) return false;
      if(!equips_.Equals(other.equips_)) return false;
      if(!equipTemps_.Equals(other.equipTemps_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0UL) hash ^= AccountId.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Diamonds != 0) hash ^= Diamonds.GetHashCode();
      if (OldLevel != 0) hash ^= OldLevel.GetHashCode();
      if (OldExp != 0) hash ^= OldExp.GetHashCode();
      if (AddedExp != 0) hash ^= AddedExp.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (Food != 0) hash ^= Food.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= cardTemps_.GetHashCode();
      hash ^= items_.GetHashCode();
      hash ^= itemTemps_.GetHashCode();
      hash ^= buffs_.GetHashCode();
      hash ^= buffTemps_.GetHashCode();
      hash ^= equips_.GetHashCode();
      hash ^= equipTemps_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AccountId);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerId);
      }
      if (Diamonds != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Diamonds);
      }
      if (OldLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OldLevel);
      }
      if (OldExp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OldExp);
      }
      if (AddedExp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AddedExp);
      }
      if (Hp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Hp);
      }
      if (Mp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Mp);
      }
      if (Food != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Food);
      }
      if (Gold != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Gold);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      cardTemps_.WriteTo(output, _repeated_cardTemps_codec);
      items_.WriteTo(output, _repeated_items_codec);
      itemTemps_.WriteTo(output, _repeated_itemTemps_codec);
      buffs_.WriteTo(output, _repeated_buffs_codec);
      buffTemps_.WriteTo(output, _repeated_buffTemps_codec);
      equips_.WriteTo(output, _repeated_equips_codec);
      equipTemps_.WriteTo(output, _repeated_equipTemps_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccountId);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Diamonds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamonds);
      }
      if (OldLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldLevel);
      }
      if (OldExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldExp);
      }
      if (AddedExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddedExp);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (Food != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Food);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += cardTemps_.CalculateSize(_repeated_cardTemps_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      size += itemTemps_.CalculateSize(_repeated_itemTemps_codec);
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      size += buffTemps_.CalculateSize(_repeated_buffTemps_codec);
      size += equips_.CalculateSize(_repeated_equips_codec);
      size += equipTemps_.CalculateSize(_repeated_equipTemps_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GCMapGetReward other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0UL) {
        AccountId = other.AccountId;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Diamonds != 0) {
        Diamonds = other.Diamonds;
      }
      if (other.OldLevel != 0) {
        OldLevel = other.OldLevel;
      }
      if (other.OldExp != 0) {
        OldExp = other.OldExp;
      }
      if (other.AddedExp != 0) {
        AddedExp = other.AddedExp;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.Food != 0) {
        Food = other.Food;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      cards_.Add(other.cards_);
      cardTemps_.Add(other.cardTemps_);
      items_.Add(other.items_);
      itemTemps_.Add(other.itemTemps_);
      buffs_.Add(other.buffs_);
      buffTemps_.Add(other.buffTemps_);
      equips_.Add(other.equips_);
      equipTemps_.Add(other.equipTemps_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 24: {
            Diamonds = input.ReadInt32();
            break;
          }
          case 32: {
            OldLevel = input.ReadInt32();
            break;
          }
          case 40: {
            OldExp = input.ReadInt32();
            break;
          }
          case 48: {
            AddedExp = input.ReadInt32();
            break;
          }
          case 56: {
            Hp = input.ReadInt32();
            break;
          }
          case 64: {
            Mp = input.ReadInt32();
            break;
          }
          case 72: {
            Food = input.ReadInt32();
            break;
          }
          case 80: {
            Gold = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 98:
          case 96: {
            cardTemps_.AddEntriesFrom(input, _repeated_cardTemps_codec);
            break;
          }
          case 106:
          case 104: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 114:
          case 112: {
            itemTemps_.AddEntriesFrom(input, _repeated_itemTemps_codec);
            break;
          }
          case 122:
          case 120: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 130:
          case 128: {
            buffTemps_.AddEntriesFrom(input, _repeated_buffTemps_codec);
            break;
          }
          case 138:
          case 136: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 146:
          case 144: {
            equipTemps_.AddEntriesFrom(input, _repeated_equipTemps_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
