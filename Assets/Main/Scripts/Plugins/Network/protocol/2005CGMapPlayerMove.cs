// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 2005_CGMapPlayerMove.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BigHead.protocol {

  /// <summary>Holder for reflection information generated from 2005_CGMapPlayerMove.proto</summary>
  public static partial class CGMapPlayerMoveReflection {

    #region Descriptor
    /// <summary>File descriptor for 2005_CGMapPlayerMove.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CGMapPlayerMoveReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChoyMDA1X0NHTWFwUGxheWVyTW92ZS5wcm90byJICg9DR01hcFBsYXllck1v",
            "dmUSEQoJcGxheWVyX2lkGAEgASgEEhAKCHRhcmdldF94GAIgASgFEhAKCHRh",
            "cmdldF95GAMgASgFQksKHWNvbS53aGFsZWlzbGFuZC5nYW1lLnByb3RvY29s",
            "QhdDR01hcFBsYXllck1vdmVQcm90b2NvbKoCEEJpZ0hlYWQucHJvdG9jb2xi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BigHead.protocol.CGMapPlayerMove), global::BigHead.protocol.CGMapPlayerMove.Parser, new[]{ "PlayerId", "TargetX", "TargetY" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 与地图卡的交互
  /// </summary>
  public sealed partial class CGMapPlayerMove : pb::IMessage<CGMapPlayerMove> {
    private static readonly pb::MessageParser<CGMapPlayerMove> _parser = new pb::MessageParser<CGMapPlayerMove>(() => new CGMapPlayerMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CGMapPlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BigHead.protocol.CGMapPlayerMoveReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapPlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapPlayerMove(CGMapPlayerMove other) : this() {
      playerId_ = other.playerId_;
      targetX_ = other.targetX_;
      targetY_ = other.targetY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CGMapPlayerMove Clone() {
      return new CGMapPlayerMove(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "target_x" field.</summary>
    public const int TargetXFieldNumber = 2;
    private int targetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetX {
      get { return targetX_; }
      set {
        targetX_ = value;
      }
    }

    /// <summary>Field number for the "target_y" field.</summary>
    public const int TargetYFieldNumber = 3;
    private int targetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetY {
      get { return targetY_; }
      set {
        targetY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CGMapPlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CGMapPlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TargetX != other.TargetX) return false;
      if (TargetY != other.TargetY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (TargetX != 0) hash ^= TargetX.GetHashCode();
      if (TargetY != 0) hash ^= TargetY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (TargetX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetX);
      }
      if (TargetY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (TargetX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetX);
      }
      if (TargetY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetY);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CGMapPlayerMove other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.TargetX != 0) {
        TargetX = other.TargetX;
      }
      if (other.TargetY != 0) {
        TargetY = other.TargetY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetX = input.ReadInt32();
            break;
          }
          case 24: {
            TargetY = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
