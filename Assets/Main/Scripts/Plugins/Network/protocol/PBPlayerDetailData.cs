// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBPlayerDetailData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BigHead.protocol {

  /// <summary>Holder for reflection information generated from PBPlayerDetailData.proto</summary>
  public static partial class PBPlayerDetailDataReflection {

    #region Descriptor
    /// <summary>File descriptor for PBPlayerDetailData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PBPlayerDetailDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQQlBsYXllckRldGFpbERhdGEucHJvdG8aDFBCRGVjay5wcm90byKDAQoS",
            "UEJQbGF5ZXJEZXRhaWxEYXRhEg4KBmVxdWlwcxgBIAMoBRINCgVidWZmcxgC",
            "IAMoBRINCgVjYXJkcxgDIAMoBRINCgVpdGVtcxgEIAMoBRIYChB1c2luZ19k",
            "ZWNrX2luZGV4GAUgASgFEhYKBWRlY2tzGAYgAygLMgcuUEJEZWNrQk4KHWNv",
            "bS53aGFsZWlzbGFuZC5nYW1lLnByb3RvY29sQhpQQlBsYXllckRldGFpbERh",
            "dGFQcm90b2NvbKoCEEJpZ0hlYWQucHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BigHead.protocol.PBDeckReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BigHead.protocol.PBPlayerDetailData), global::BigHead.protocol.PBPlayerDetailData.Parser, new[]{ "Equips", "Buffs", "Cards", "Items", "UsingDeckIndex", "Decks" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Game Player's Data
  /// </summary>
  public sealed partial class PBPlayerDetailData : pb::IMessage<PBPlayerDetailData> {
    private static readonly pb::MessageParser<PBPlayerDetailData> _parser = new pb::MessageParser<PBPlayerDetailData>(() => new PBPlayerDetailData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBPlayerDetailData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BigHead.protocol.PBPlayerDetailDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBPlayerDetailData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBPlayerDetailData(PBPlayerDetailData other) : this() {
      equips_ = other.equips_.Clone();
      buffs_ = other.buffs_.Clone();
      cards_ = other.cards_.Clone();
      items_ = other.items_.Clone();
      usingDeckIndex_ = other.usingDeckIndex_;
      decks_ = other.decks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBPlayerDetailData Clone() {
      return new PBPlayerDetailData(this);
    }

    /// <summary>Field number for the "equips" field.</summary>
    public const int EquipsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_equips_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> equips_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///所有的装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_buffs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> buffs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///目前没有用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///所有的卡牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_items_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> items_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///消耗品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "using_deck_index" field.</summary>
    public const int UsingDeckIndexFieldNumber = 5;
    private int usingDeckIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsingDeckIndex {
      get { return usingDeckIndex_; }
      set {
        usingDeckIndex_ = value;
      }
    }

    /// <summary>Field number for the "decks" field.</summary>
    public const int DecksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::BigHead.protocol.PBDeck> _repeated_decks_codec
        = pb::FieldCodec.ForMessage(50, global::BigHead.protocol.PBDeck.Parser);
    private readonly pbc::RepeatedField<global::BigHead.protocol.PBDeck> decks_ = new pbc::RepeatedField<global::BigHead.protocol.PBDeck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::BigHead.protocol.PBDeck> Decks {
      get { return decks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBPlayerDetailData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBPlayerDetailData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!equips_.Equals(other.equips_)) return false;
      if(!buffs_.Equals(other.buffs_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!items_.Equals(other.items_)) return false;
      if (UsingDeckIndex != other.UsingDeckIndex) return false;
      if(!decks_.Equals(other.decks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= equips_.GetHashCode();
      hash ^= buffs_.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= items_.GetHashCode();
      if (UsingDeckIndex != 0) hash ^= UsingDeckIndex.GetHashCode();
      hash ^= decks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equips_.WriteTo(output, _repeated_equips_codec);
      buffs_.WriteTo(output, _repeated_buffs_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      items_.WriteTo(output, _repeated_items_codec);
      if (UsingDeckIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UsingDeckIndex);
      }
      decks_.WriteTo(output, _repeated_decks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equips_.CalculateSize(_repeated_equips_codec);
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += items_.CalculateSize(_repeated_items_codec);
      if (UsingDeckIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsingDeckIndex);
      }
      size += decks_.CalculateSize(_repeated_decks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBPlayerDetailData other) {
      if (other == null) {
        return;
      }
      equips_.Add(other.equips_);
      buffs_.Add(other.buffs_);
      cards_.Add(other.cards_);
      items_.Add(other.items_);
      if (other.UsingDeckIndex != 0) {
        UsingDeckIndex = other.UsingDeckIndex;
      }
      decks_.Add(other.decks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 18:
          case 16: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 34:
          case 32: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 40: {
            UsingDeckIndex = input.ReadInt32();
            break;
          }
          case 50: {
            decks_.AddEntriesFrom(input, _repeated_decks_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
